generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auction {
  id           String      @id @default(uuid())
  serialNumber Int         @unique @map("serial_number")
  type         AuctionType @default(REGULAR)
  title        String
  isActive     Boolean     @default(true)
  isPublic     Boolean     @default(true)
  startsAt     DateTime?
  endsAt       DateTime
  initialPrice Int         @default(0)
  stepPrice    Int         @default(0)
  buyoutPrice  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId           String?
  chatroomId          String
  lastStepPriceUserId String?

  positions     AuctionPosition[]
  participants  AuctionParticipants[]
  AuctionWinner AuctionWinner[]

  deletedAt    DateTime?
  deleteReason String?

  @@map("auctions")
}

model AuctionPosition {
  id String @id @default(uuid())

  productId        Int
  processingTypeId Int
  cuttingTypeId    Int
  sortId           Int
  sizeId           Int?
  catchAreaId      Int?

  expiration            Int
  manufactureDate       DateTime
  manufacturer          String
  accompanyingDocuments String[]

  images    String[]
  documents String[]
  comment   String?

  netWeight          Int?
  storageName        String
  onePieceUnit       Int
  totalVolume        Int
  storageAddress     String
  storageTemperature Int
  storateUnit        VolumeUnit

  saleFromShip Boolean?
  shipName     String?
  arrivalPort  String?
  arrivalDate  DateTime?

  typeOfPackaging String?

  additionalServices        Int[]
  additionalServicesComment String?

  price Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auctionId String
  auction   Auction @relation(fields: [auctionId], references: [id])

  @@map("auction_positions")
}

model AuctionParticipants {
  id        Int     @id @default(autoincrement())
  auctionId String
  auction   Auction @relation(fields: [auctionId], references: [id])

  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("auction_participants")
}

model AuctionWinner {
  id        String   @id @default(uuid())
  auctionId String
  userId    String
  createdAt DateTime @default(now())

  auction Auction @relation(fields: [auctionId], references: [id])

  @@map("auction_winners")
}

enum AuctionType {
  REGULAR
  COLLECTIVE
}

enum VolumeUnit {
  KG
  TON
}
